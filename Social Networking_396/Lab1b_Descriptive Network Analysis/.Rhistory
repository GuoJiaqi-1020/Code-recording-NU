if (!"vosonSML" %in% installed.packages()) install.packages("vosonSML") ## this package is a social media data collection tool
if (!"magrittr" %in% installed.packages()) install.packages("magrittr") ## this package allows you to use so-called pipe (%>%)
if (!"igraph" %in% installed.packages()) install.packages("igraph") ## this package is a network analysis tool
if (!"statnet" %in% install.packages()) install.packages("statnet") ## this package is another popular network analysis tool
# Now run the lines below to load the packages you have installed.
# You need to load packages every time you run the script or restart R.
library(magrittr)
library(igraph)
library(vosonSML)
# Load the dataset that you generated in lab 1a
# Make sure that you put the RData in your working directory
load('Lab1_Descriptive_JiaqiGuo.RData')
# Take out the largest component from the graph
comp <- components(actorGraph)
giantGraph <- actorGraph %>%
induced.subgraph(., which(comp$membership == which.max(comp$csize)))
vcount(giantGraph) ## the number of nodes/actors/users
ecount(giantGraph) ## the number of edges
plot(giantGraph, vertex.size = 7, vertex.label = NA) ## review the largest component
# For this part, you switch 'igraph' to 'sna' package because we are going to use
# some functions that only are available in sna package
# As a first step, create a 'sna' graph object from an 'igraph' object
sna_g <- igraph::get.adjacency(giantGraph, sparse=FALSE) %>% network::as.network.matrix()
# this detaching is a necessary step since the two packages have some same function names
# R is often confuesed
detach('package:igraph')
library(statnet)
library(ergm)
library(tergm)
library(network)
library(tsna)
# Compute centralities based on 'network' package
# Calculate in-degree centrality
odegScores <- degree(sna_g, cmode = 'outdegree')
# Store the information
centralities <- data.frame('node_name' = as.character(network.vertex.names(sna_g)),
'in_degree' = degree(sna_g, cmode = 'indegree'))
# Calculate out-degree centrality and store it in the data.frame called 'centralities'
centralities$out_degree <- degree(sna_g, cmode = 'outdegree')
# Calculate betweenness centrality and store it in the data.frame called 'centralities'
centralities$betweenness <- betweenness(sna_g)
# Calculate closeness centrality and store it in the data.frame called 'centralities'
centralities$incloseness <- igraph::closeness(giantGraph, mode = 'in')
centralities$outcloseness <- igraph::closeness(giantGraph, mode = 'out')
# Calculate eigenvector centrality and store it in the data.frame called 'centralities'
# using 'igraph' because the code implemented in 'sna' is unreliable
centralities$eigen <- igraph::eigen_centrality(giantGraph)$vector
# Calculate Burt's network constraint and store it in the data.frame called 'centralities'
# using 'igraph' because 'sna' doesn't have the function
centralities$netconstraint <- igraph::constraint(giantGraph)
help(constraint) # Be careful with the interpretation for constraint:
# Calculate authority and store it in the data.frame called 'centralities'
# using 'igraph' because 'sna' doesn't have the function
# 'igraph::' allows calling for any igraph function without loading the package
centralities$authority <- igraph::authority_score(giantGraph, scale = TRUE)$`vector`
# Calculate hub and store it in the data.frame called 'centralities'
# using 'igraph' because 'sna' doesn't have the function
centralities$hub <- igraph::hub_score(giantGraph, scale = TRUE)$`vector`
View(centralities)
if (!"vosonSML" %in% installed.packages()) install.packages("vosonSML") ## this package is a social media data collection tool
if (!"magrittr" %in% installed.packages()) install.packages("magrittr") ## this package allows you to use so-called pipe (%>%)
if (!"igraph" %in% installed.packages()) install.packages("igraph") ## this package is a network analysis tool
if (!"vosonSML" %in% installed.packages()) install.packages("vosonSML") ## this package is a social media data collection tool
if (!"igraph" %in% installed.packages()) install.packages("igraph") ## this package is a network analysis tool
setwd("C:/Users/gjq/OneDrive/桌面/learn/Code-recording-NU/Social Networking_396/Lab1b_Descriptive Network Analysis")
setwd("C:/Users/gjq/OneDrive/桌面/learn/Code-recording-NU/Social Networking_396/Lab1b_Descriptive Network Analysis")
if (!"magrittr" %in% installed.packages()) install.packages("magrittr") ## this package allows you to use so-called pipe (%>%)
