vertex.size = 4,               ## node size
vertex.color = 'red',           ## node color
# 设置节点的大小，颜色
# Settings for node labels:
vertex.label = NA,           ## uncomment  this line to remove node labels
vertex.label.cex = .7,          ## node label size
vertex.label.color = 'gray19',  ## node label color
# Settings for edges:
edge.arrow.size = .35,           ## arrow size
edge.color = 'gray30',          ## arrow color
# Settings for layouts:
#      Running this command multiple times will produce slightly different networks,
#      based on the layout algorithm used. You can swap alogrithms by uncommenting one of the
#      lines below. Which alogrithm works best often depends on the data
# layout = layout_nicely(.)      ## Automated layout recommendation from iGraph
# layout = layout_with_fr(.)    ## Fruchterman-Reingold algorithm
# layout = layout_with_dh(.)    ## Davidson and Harel algorithm
# layout = layout_with_drl(.)   ## Force-directed algorithm
# layout = layout_with_kk(.)    ## Spring algorithm
layout = layout_with_lgl(.)   ## Large graph layout
)
# Below, actorGraph is the name of the network object we are passing to the plot command using "%>%'
actorGraph %>%
plot(.,
# Plot margins:
# margin = c(0,0,0,0),           ## values for the size of the bottom, left, top, and right plot margins
#      While 0 is the default, negative values can cut down on margins and
#      help make the plot bigger. Just make sure you don't cut anything off
margin = c(-0.3,-0.3,-0.3,-0.3),
# 设置图像的大小
# Settings for nodes:
vertex.size = 4,               ## node size
vertex.color = 'red',           ## node color
# 设置节点的大小，颜色
# Settings for node labels:
vertex.label = NA,           ## uncomment  this line to remove node labels
vertex.label.cex = .7,          ## node label size
vertex.label.color = 'gray19',  ## node label color
# Settings for edges:
edge.arrow.size = .35,           ## arrow size
edge.color = 'gray30',          ## arrow color
# Settings for layouts:
#      Running this command multiple times will produce slightly different networks,
#      based on the layout algorithm used. You can swap alogrithms by uncommenting one of the
#      lines below. Which alogrithm works best often depends on the data
layout = layout_nicely(.)      ## Automated layout recommendation from iGraph
# layout = layout_with_fr(.)    ## Fruchterman-Reingold algorithm
# layout = layout_with_dh(.)    ## Davidson and Harel algorithm
# layout = layout_with_drl(.)   ## Force-directed algorithm
# layout = layout_with_kk(.)    ## Spring algorithm
# layout = layout_with_lgl(.)   ## Large graph layout
)
# Take out a giant component from the graph
giantGraph <- actorGraph %>%
induced.subgraph(., which(comp$membership == which.max(comp$csize)))
vcount(giantGraph) ## the number of nodes/actors/users
ecount(giantGraph) ## the number of edges
# Plot a graph of giant component
giantGraph %>%
plot(.,
layout = layout_with_drl(.), ## force-directed graph layout
edge.arrow.size = .3,
vertex.label = NA,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout_with_drl(.), ## Davidson and Harel graph layout
edge.arrow.size = .3,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout_with_drl(.), ## Davidson and Harel graph layout
edge.arrow.size = .2,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a graph of giant component
giantGraph %>%
plot(.,
layout = layout_with_drl(.), ## force-directed graph layout
edge.arrow.size = .2,
vertex.label = NA,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a graph of giant component
giantGraph %>%
plot(.,
layout = layout_with_drl(.), ## force-directed graph layout
edge.arrow.size = .2,
# vertex.label = NA,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout_with_dh(.), ## Davidson and Harel graph layout
edge.arrow.size = .2,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout_with_drl(.), ## Davidson and Harel graph layout
edge.arrow.size = .2,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
# Plot a second graph of giant component
giantGraph %>%
plot(.,
layout_with_kk(.), ## Davidson and Harel graph layout
edge.arrow.size = .2,
vertex.size = 4,
vertex.color = 'red',
vertex.label.cex = .5,
vertex.label.color = 'black')
library(igraph)
library(RColorBrewer)
help("brewer.pal")
edges <- read.csv("edge.csv", sep =",")
attrs <- read.csv("attr.csv", sep =",")
#sample_idx -> sample(nrow(edges), 10000)
#edges <- edges[sample_idx, ]
#attrs <- attrs[sample_idx, ]
actorGraph <- graph.data.frame(edges)
V(actorGraph)
vcount(actorGraph)
actorGraph <- set_vertex_attr(actorGraph, "group", value = attrs$group)
actorGraph <- set_vertex_attr(actorGraph, "salesrank", value = attrs$salesrank)
actorGraph <- set_vertex_attr(actorGraph, "reviews_num", value = attrs$reviews_num)
actorGraph <- set_vertex_attr(actorGraph, "avg_rating", value = attrs$avg_rating)
comp <- components(actorGraph)
comp
n<-length(comp$csize)
####################################################################
# 提取出giantgraph
####################################################################
giantGraph <- actorGraph %>%
induced.subgraph(., which(comp$membership == which(comp$csize == sort(comp$csize)[n-2])))
col <- data.frame(group = unique(vertex_attr(giantGraph, "group")), stringsAsFactors = F)
if (length(col$group) >= 3) {
col$color <- brewer.pal(nrow(col), "GnBu")
} else if (length(col$group) == 2){
col$color <- c("Yellow","Green")
} else {
col$color <- c("Yellow")
}
V(giantGraph)$color <- col$color[match(V(giantGraph)$group, col$group)]
giantGraph %>%
plot(.,
layout = layout_with_kk(.), ## force-directed graph layout
edge.arrow.size = .3,
vertex.label = NA,
vertex.size = 4,
vertex.label.cex = .5,
vertex.label.color = 'black')
giantGraph %>%
plot(.,
layout = layout_with_kk(.),
# layout = layout_with_sugiyama(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.label = NA,
vertex.color = adjustcolor(graph.coreness(.), alpha.f = .3),
vertex.label.cex = .5,
vertex.label.color = 'black',
mark.groups = by(seq_along(graph.coreness(.)), graph.coreness(.), invisible),
mark.shape = 1/4,
mark.col = rainbow(length(unique(graph.coreness(.))),alpha = .1),
mark.border = NA
)
####################################################################
# 将giantgraph表示为statnet
####################################################################
library(statnet)
vcount(giantGraph)
giantgraph_info=as_data_frame(giantGraph, "both")
amazon <- as.network.matrix(giantgraph_info$edges, matrix.type = "edgelist")
set.vertex.attribute(amazon, "group", giantgraph_info$vertices$group) # Indicator variable for department leader
set.vertex.attribute(amazon, "salesrank", giantgraph_info$vertices$salesrank) # Years tenure
set.vertex.attribute(amazon, "reviews_num", giantgraph_info$vertices$reviews_num) # Indicator variable for whether they are located in the main or secondary office
set.vertex.attribute(amazon, "avg_rating", giantgraph_info$vertices$avg_rating) # Indicator variable for female vs. male
get.vertex.attribute(amazon,"group")
get.vertex.attribute(amazon,"salesrank")
get.vertex.attribute(amazon,"reviews_num")
get.vertex.attribute(amazon,"avg_rating")
####################################################################
# 套用ERGM模型
####################################################################
# Look at Endogenous statistics: terms based on only ties in the advice network
summary(advice ~ edges)                     # Number of edges (ties)
summary(advice ~ mutual)                    # Number of pairs of reciprocated ties
summary(advice ~ odegree(0:5))              # Outdegree distribution. (# of nodes with outdegree of 0, # nodes outdegree of 1, etc.)
# Remember, respondents could nominate at most five employees in our survey
summary(advice ~ idegree(0:65))             # Indegree distribution.
summary(advice ~ gwodegree(log(2),fixed=T)) # One parameter summarizing outdegree distribution - tendency against outdegree hubs
summary(advice ~ gwidegree(log(2),fixed=T)) # One parameters summarizing indegree distribution - tendency against indegree hubs
summary(advice ~ desp(1:5))                 # Pairs of nodes with one shared partner, two shared partners, etc.
summary(advice ~ dgwesp(log(2),fixed = T))  # One parameter summarizing
# Look at Exogenous statistics: terms based on advice ties AND other ties / node attributes
summary(advice ~ nodeicov("office"))             # Ties directed towards employees at the main office (as opposed to secondary office)
summary(advice ~ nodeocov("office"))             # Ties originating from employees at the main office (as opposed to secondary office)
summary(advice ~ nodematch("female"))            # Number of ties between people of the same sex
summary(advice ~ nodematch("department"))        # Number of ties between people working in the same department
summary(advice ~ nodemix("leader",levels2=NULL)) # Number of ties between different combinations of leaders(1) and non-leaders(0)
summary(advice ~ diff("tenure"))                 # Total difference in tenure: sum of (sender's tenure - receivers-tenure) for all ties
summary(advice ~ edgecov(hundreds_messages))     # Total messages sent: sum of (messages sent from sender to receiver)/100 for all Advice ties
# e.g., a total of 5669 messages were sent from employees to those they go to for advice during the observed period
options(ergm.loglik.warn_dyads=FALSE)
library(igraph)
library(RColorBrewer)
help("brewer.pal")
edges <- read.csv("edge.csv", sep =",")
attrs <- read.csv("attr.csv", sep =",")
#sample_idx -> sample(nrow(edges), 10000)
#edges <- edges[sample_idx, ]
#attrs <- attrs[sample_idx, ]
actorGraph <- graph.data.frame(edges)
V(actorGraph)
vcount(actorGraph)
actorGraph <- set_vertex_attr(actorGraph, "group", value = attrs$group)
actorGraph <- set_vertex_attr(actorGraph, "salesrank", value = attrs$salesrank)
actorGraph <- set_vertex_attr(actorGraph, "reviews_num", value = attrs$reviews_num)
actorGraph <- set_vertex_attr(actorGraph, "avg_rating", value = attrs$avg_rating)
comp <- components(actorGraph)
comp
n<-length(comp$csize)
####################################################################
# 提取出giantgraph
####################################################################
giantGraph <- actorGraph %>%
induced.subgraph(., which(comp$membership == which(comp$csize == sort(comp$csize)[n-2])))
col <- data.frame(group = unique(vertex_attr(giantGraph, "group")), stringsAsFactors = F)
if (length(col$group) >= 3) {
col$color <- brewer.pal(nrow(col), "GnBu")
} else if (length(col$group) == 2){
col$color <- c("Yellow","Green")
} else {
col$color <- c("Yellow")
}
V(giantGraph)$color <- col$color[match(V(giantGraph)$group, col$group)]
giantGraph %>%
plot(.,
layout = layout_with_kk(.), ## force-directed graph layout
edge.arrow.size = .3,
vertex.label = NA,
vertex.size = 4,
vertex.label.cex = .5,
vertex.label.color = 'black')
giantGraph %>%
plot(.,
layout = layout_with_kk(.),
# layout = layout_with_sugiyama(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.label = NA,
vertex.color = adjustcolor(graph.coreness(.), alpha.f = .3),
vertex.label.cex = .5,
vertex.label.color = 'black',
mark.groups = by(seq_along(graph.coreness(.)), graph.coreness(.), invisible),
mark.shape = 1/4,
mark.col = rainbow(length(unique(graph.coreness(.))),alpha = .1),
mark.border = NA
)
####################################################################
# 将giantgraph表示为statnet
####################################################################
library(statnet)
vcount(giantGraph)
giantgraph_info=as_data_frame(giantGraph, "both")
amazon <- as.network.matrix(giantgraph_info$edges, matrix.type = "edgelist")
set.vertex.attribute(amazon, "group", giantgraph_info$vertices$group) # Indicator variable for department leader
set.vertex.attribute(amazon, "salesrank", giantgraph_info$vertices$salesrank) # Years tenure
set.vertex.attribute(amazon, "reviews_num", giantgraph_info$vertices$reviews_num) # Indicator variable for whether they are located in the main or secondary office
set.vertex.attribute(amazon, "avg_rating", giantgraph_info$vertices$avg_rating) # Indicator variable for female vs. male
get.vertex.attribute(amazon,"group")
get.vertex.attribute(amazon,"salesrank")
get.vertex.attribute(amazon,"reviews_num")
get.vertex.attribute(amazon,"avg_rating")
####################################################################
# 套用ERGM模型
####################################################################
# Look at Endogenous statistics: terms based on only ties in the advice network
summary(advice ~ edges)                     # Number of edges (ties)
summary(advice ~ mutual)                    # Number of pairs of reciprocated ties
summary(advice ~ odegree(0:5))              # Outdegree distribution. (# of nodes with outdegree of 0, # nodes outdegree of 1, etc.)
# Remember, respondents could nominate at most five employees in our survey
summary(advice ~ idegree(0:65))             # Indegree distribution.
summary(advice ~ gwodegree(log(2),fixed=T)) # One parameter summarizing outdegree distribution - tendency against outdegree hubs
summary(advice ~ gwidegree(log(2),fixed=T)) # One parameters summarizing indegree distribution - tendency against indegree hubs
summary(advice ~ desp(1:5))                 # Pairs of nodes with one shared partner, two shared partners, etc.
summary(advice ~ dgwesp(log(2),fixed = T))  # One parameter summarizing
# Look at Exogenous statistics: terms based on advice ties AND other ties / node attributes
summary(advice ~ nodeicov("office"))             # Ties directed towards employees at the main office (as opposed to secondary office)
summary(advice ~ nodeocov("office"))             # Ties originating from employees at the main office (as opposed to secondary office)
summary(advice ~ nodematch("female"))            # Number of ties between people of the same sex
summary(advice ~ nodematch("department"))        # Number of ties between people working in the same department
summary(advice ~ nodemix("leader",levels2=NULL)) # Number of ties between different combinations of leaders(1) and non-leaders(0)
summary(advice ~ diff("tenure"))                 # Total difference in tenure: sum of (sender's tenure - receivers-tenure) for all ties
summary(advice ~ edgecov(hundreds_messages))     # Total messages sent: sum of (messages sent from sender to receiver)/100 for all Advice ties
# e.g., a total of 5669 messages were sent from employees to those they go to for advice during the observed period
options(ergm.loglik.warn_dyads=FALSE)
model1 <- ergm(amazon ~ edges
# Structural patterns
mutual
+ gwidegree(log(2), fixed = T)                 # Inverted preferential attachment (indegree)
+ gwodegree(2, fixed = T, cutoff = 5)              # Inverted preferential attachment (outdegree)
+ dgwesp(log(2), type = "OTP", fixed = T, cutoff =5)    # A modified version of Outgoing Two Path(i->j + i->k->j) structures. Geometrically weighted version of transitivity
# Node attribute effects
+ nodematch("female")                                   # Homophily on a categorical variable
+ nodemix("leader", base = 3)
+ nodematch("department")
+ nodeicov("office")                                    # Covariance between in-degree of nodes and attributes of nodes
+ nodeocov("office")                                    # Covariance between out-degree of nodes and attributes of nodes
+ diff("tenure")                                        # Difference is computed as (tenure_i - tenure_j) i: sending node, j: receiving node
+ edgecov(hundreds_messages)                            # Covariance baatween edges of two networks (predictor can be continous)
# Constraints on network
, constraints =~ bd(maxout=5)                           # This constraint enforces the maximum outdegree is 5
# Control settings for MCMC-MLE algorithm
, control = control.ergm(MCMC.effectiveSize = 50)
)
setwd("C:/Users/20129/Desktop/learn/Code Record@Nu/Code-recording-NU/Social Networking_396/Lab1b_Descriptive Network Analysis")
if (!"vosonSML" %in% installed.packages()) install.packages("vosonSML")
if (!"magrittr" %in% installed.packages()) install.packages("magrittr")
if (!"igraph" %in% installed.packages()) install.packages("igraph")
if (!"statnet" %in% install.packages()) install.packages("statnet")
library(magrittr)
library(igraph)
library(vosonSML)
load('Lab1_Descriptive_JiaqiGuo.RData')
# Take out the largest component from the graph
comp <- components(actorGraph)
giantGraph <- actorGraph %>%
induced.subgraph(., which(comp$membership == which.max(comp$csize)))
vcount(giantGraph) ## the number of nodes/actors/users
ecount(giantGraph) ## the number of edges
plot(giantGraph, vertex.size = 7, vertex.label = NA)
######################################################################################
#
# Part III: Individual Network Properties
#
######################################################################################
sna_g <- igraph::get.adjacency(giantGraph, sparse=FALSE) %>% network::as.network.matrix()
detach('package:igraph')
library(statnet)
library(ergm)
library(tergm)
library(network)
library(tsna)
# Calculate in-degree centrality
odegScores <- degree(sna_g, cmode = 'outdegree')
# Store the information
centralities <- data.frame('node_name' = as.character(network.vertex.names(sna_g)),
'in_degree' = degree(sna_g, cmode = 'indegree'))
# Calculate out-degree centrality and store it in the data.frame called 'centralities'
centralities$out_degree <- degree(sna_g, cmode = 'outdegree')
# Calculate betweenness centrality and store it in the data.frame called 'centralities'
centralities$betweenness <- betweenness(sna_g)
# Calculate closeness centrality and store it in the data.frame called 'centralities'
centralities$incloseness <- igraph::closeness(giantGraph, mode = 'in')
centralities$outcloseness <- igraph::closeness(giantGraph, mode = 'out')
# Calculate eigenvector centrality and store it in the data.frame called 'centralities'
centralities$eigen <- igraph::eigen_centrality(giantGraph)$vector
# Calculate Burt's network constraint and store it in the data.frame called 'centralities'
centralities$netconstraint <- igraph::constraint(giantGraph)
help(constraint) # Be careful with the interpretation for constraint:
# High constraint = redundant contacts, low constraint = acting as a broker
# Calculate authority and store it in the data.frame called 'centralities'
centralities$authority <- igraph::authority_score(giantGraph, scale = TRUE)$`vector`
# Calculate hub and store it in the data.frame called 'centralities'
centralities$hub <- igraph::hub_score(giantGraph, scale = TRUE)$`vector`
View(centralities)
######################################################################################
#
# Part IV: Global Network Proporties
#
######################################################################################
detach('package:statnet', unload = TRUE)
library(igraph)
help(coreness)
kcore <- giantGraph %>% graph.coreness(.) ## calculate k-cores
kcore
## Plot a graph colored by the k-core decompotion results
giantGraph %>%
plot(.,
layout = layout_with_gem(.),
#layout = layout_with_sugiyama(.),
edge.arrow.size = .3,
vertex.size = 4,
vertex.label = NA,
vertex.color = adjustcolor(graph.coreness(.), alpha.f = .3),
vertex.label.cex = .5,
vertex.label.color = 'black',
mark.groups = by(seq_along(graph.coreness(.)), graph.coreness(.), invisible),
mark.shape = 1/4,
mark.col = rainbow(length(unique(graph.coreness(.))),alpha = .1),
mark.border = NA
)
cluster <- giantGraph %>% cluster_walktrap()
cluster
help(cluster_edge_betweenness)
help(cluster_walktrap)
help(cluster_infomap)
# modularity measure
modularity(cluster)
help(modularity)
# Find the number of clusters
membership(cluster)   # affiliation list
length(cluster) # number of clusters
sizes(cluster)
# Visualize clusters
cluster %>% plot(.,giantGraph,
# layout = layout_with_gem(.),
layout = layout_with_fr(giantGraph),
edge.arrow.size = .2,
vertex.size = 3,
vertex.label = NA,
vertex.color = adjustcolor(membership(.), alpha.f = .3),
vertex.label.cex = .5,
vertex.label.color = 'black',
mark.groups = by(seq_along(membership(.)), membership(.), invisible),
mark.shape = 1/4,
mark.col = rainbow(length(.),alpha = .1),
mark.border = NA
)
# Examine the in-degree distribution
giantGraph %>% degree.distribution(.,mode="in") %>%
plot(., col = 'black', pch = 19, cex = 1.5,
main = 'In-degree Distribution',
ylab = 'Density',
xlab = 'In-degree')
# Plot a log-log plot of in-degree distribution
giantGraph %>%
degree.distribution(.,cumulative = TRUE,mode ='in') %>%
plot(1:(max(degree(giantGraph,mode='in'))+1),.,
log='xy', type = 'l',
main = 'Log-Log Plot of In-degree',
ylab = 'CCDF',
xlab = 'In-degree')
# Fit a power law to the degree distribution
in_power <- giantGraph %>%
degree.distribution(., mode='in') %>%
power.law.fit(.)
in_power
help(power.law.fit)
# Examine the out-degree distribution
giantGraph %>% degree.distribution(.,mode="out") %>%
plot(., col = 'black', pch = 19, cex = 1.5,
main = 'Out-degree Distribution',
ylab = 'Density',
xlab = 'Out-degree')
# Plot a log-log plot
giantGraph %>%
degree.distribution(.,cumulative = TRUE,mode ='out') %>%
plot(1:(max(degree(giantGraph,mode='out'))+1),
., log='xy', type = 'l',
main = 'Log-Log Plot of Out-degree',
ylab = 'CCDF',
xlab = 'Out-degree')
# Fit a power law to the degree distribution
out_power <- giantGraph %>%
degree.distribution(., mode='out') %>%
power.law.fit(.)
out_power
# Small-world Characteristics
ntrials <- 1000
cl.rg <- numeric(ntrials)
apl.rg <- numeric(ntrials)
for (i in (1:ntrials)) {
g.rg <- rewire(giantGraph, keeping_degseq(niter = 100))
cl.rg[i] <- transitivity(g.rg, type = 'average')
apl.rg[i] <- average.path.length(g.rg)
}
# plot a histogram of simulated values for clustering coefficient + the observed value
hist(cl.rg,
main = 'Histogram of Clustering Coefficient',
xlab = 'Clustering Coefficient')
par(xpd = FALSE)
abline(v = giantGraph %>% transitivity(., type = 'average'), col = 'red', lty = 2)
# this tests whether the observed value is statistically different from the simulated distribution
t.test(cl.rg, mu=giantGraph %>% transitivity(., type = 'average'),
alternative = 'greater')
help(t.test)
# plot a histogram of simulated values for average path length + the observed value
hist(apl.rg,
main = 'Histogram of Average Path Length',
xlab = 'Average Path Length')
# the line indicates the mean value of average path length for your network
abline(v = giantGraph %>% average.path.length(), col = 'red', lty = 2)
# this tests whether the observed value is statistically different from the simulated distribution
t.test(apl.rg, mu=giantGraph %>% average.path.length(.),
alternative = 'greater')
save.image('Lab1_Descriptive_JiaqiGuo_lab1b.RData')
View(centralities)
View(centralities)
load('Lab1_Descriptive_JiaqiGuo_lab1b.RData')
